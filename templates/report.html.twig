{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block main %}
<main class="main">
    <h1>Report</h1>
    <ul id="report-list">
        <li><a href="#kmom01">01</a></li>
        <li><a href="#kmom02">02</a></li>
        <li><a href="#kmom03">03</a></li>
        <li><a href="#kmom04">04</a></li>
        <li><a href="#kmom05">05</a></li>
        <li><a href="#kmom06">06</a></li>
        <li><a href="#kmom10">10</a></li>
    </ul>


    <h2 id="kmom01">Kmom01</a>
    <h3>Mina förkunskaper och tidigare erfarenheter kring objektorientering</h3>
    Det var på kursen oopython som jag lärde mig om objektorientering för första gången. 
    I början känndes det som att jag skrev koden på ett komplicerat sätt men så småningom kom jag att förstå objektorientering är som jag skapar "blåkopia av bilen". Därefter kan man använda det för att tillverka instanser till exempel Toyoya och Volvo bilar.

    <h3>PHPs modell för klasser och objekt</h3>
    I PHP skapas en objekt urifrån en klass och en klass är en samling av variabler och metoder som behövs gemensamt.
    Genom "extends" kan man skapa en ny klass via arv. Om man titta på report-uppgiften jag skapar en ny klass som heter "ReportController" genom ärver klassen "AbstractController" i filen ReportController.php.

    <h3>Om uppgiften report</h3>
    Jag har skapat kodbas och strukturen genom att följa föreläsningen. 
    Kodstrukturen är i grunden baserad på MVC och vyer beskrivs i filer i templates mappen och controller beskrivs i ReportController-filen i src-mappen.
    För design använde jag SASS. Det gick inte bra att kompilera det till css-fil med npm som vi gjorde i design-kursen, så jag installerade och använde vscodes tillägg, Live Sass Compiler.
    Min TIL med uppgiften var att jag kunde förstå djupare om MVC kodstrukturen som verkade vara mycket mer komplicerad förut vid tidigare kurser. Dessutom kunde jag komma igång med objektorienterad PHP såsom användning av "extends".

    <h3>Om artikeln "PHP The Right Way"</h3>
    Jag tycker att det var intressant att läsa om "Dependency Management". Jag brukade använde composer utan känna till det väl men förstår jag nu bättre om dess roll som beroendehanteraren.
    Dessutom var kapitlet om mallar också bra för att organisera min förståelse. Genom användning av vyer i mvc kan man skriva lättläst kod begränsad till innehållsvisning.

    <h2 id="kmom02">Kmom02</h2>
    <h3>Objektorientering</h3>
    <p>Arv låter en klass ärva egenskaper och metoder från en annan klass. Genom att använda arv kan man undvika att duplicera kod och istället återanvända redan skriven kod. </p>

    <p>Komposition är en mekanism där en klass innehåller en eller flera instanser av andra klasser istället för att ärva egenskaper och metoder från en föräldraklass. Detta gör det möjligt att bygga mer flexibla och återanvändbara objekt.</p>

    <p>Interface definierar en uppsättning metoder som en klass kan implementera. Detta gör det möjligt att separera implementation från gränssnittet, vilket gör det lättare att byta ut implementationen senare. En klass implementerar ett interface genom att definiera alla metoder som finns i interfacet.</p>

    <p>Trait gör det möjligt att återanvända kod mellan klasser utan att skapa en hierarki av klasser. En trait definierar en uppsättning metoder som kan användas i flera klasser. En klass kan använda flera traits och traits kan använda andra traits.</p>
    
    <h3>Implementation av kortspelet</h3>
    <p>Två klasser, Card och Deck, används i detta kortspelet. I Card-klassen har varje kort ett märkesattribut som representerar fyra symboler och ett numeriskt värdeattribut. Klassen Deck tillhandahåller funktioner som att skapa nya kortlekar, blanda kortlekar och dra kort från kortlekar. Dessutom skapar shuffle inte en ny kortlek, utan blandar den befintliga kortleken som sparats i sessionen.</p>

    <p>Jag försökte återanvända twig-filer så mycket som möjligt och rendera Deck och Shuffle till samma fil, och Draw till samma fil oavsett om det är ett eller flera kort som dras ut.</p>

    <p>När det gäller JSON API-frågan hade jag svårt att skapa en route för POST-metoden och för att skicka en POST-förfrågan från webbklienten. Jag ville använda användarinmatningsvärde för att visa hur många kort som dras, men det fungerade inte bra på studentservern. Så jag använde standardvärdet för att vara fem istället.</p>

    <p>Min TIL för det här kursmoment var att jag kunde öva på klasskoncept och sessionshantering.</p>

    <h2 id="kmom03">Kmom03</h2>
    <p>Modeling a card game with flowcharts and pseudocode was not easy but this process helped me to manage complex logic when I started to write codes. This approach assisted me in providing a clear roadmap before actual coding.</p>
    <p>When I started to work on this assignment, I realised that my understanding in classes was not enough. It was sometimes confusing how to refer to the object and I got errors which were claiming that a variable is not found. I also had a time blanck since I did my kmom02 so it took some time to remember this project and get used to it. Since I figured out the base structure of this framework, it felt much easier with everything.</p>
    <p>I found Symfony is quite user-friendly and simple to use, especially once you get used to it, for example it makes it easy to create new routes and new controllers.</p>
    <p>TIL for this assignment was that I could practice to use classes and objects. The logic with classes is still confusing sometimes so it was a good opportunity to train myself with this.</p>

    <h2 id="kmom04">Kmom04</h2>
    <p>It was my first time to write unit tests with PHPUnit. I think most challenging part for me was to install Xdebug to my Mac PC rather than writing tests. Anyway, it is great to see code coverage in clear number which helps me to understand about my testing code.</p>
    <p>I could get more than 90% of code coverage. I think my code was not difficult to test in general and I didn’t write on my code. I think one of important things for testable code is that each function/method is not that long and simple structured. So I agree with the idea that testable code is “snygg och ren kod”. If code is long and complicated, it is not nice and simple and not testable either.</p>
    <p>My TIL for kmom04 was to use PHPUnit and Xdebug. Also I leaned to look into code from tester’s perspective which is little different from the one of developer’s. When I am working on developing a web application, my focus is almost 100% on it's outcomes and if the code works. It is easy to forget about writing testable codes. However, I think it is important to prioritize writing testable code which is more efficient in development cycles as it is required especially when I work in a team.</p>

    <h2 id="kmom05">Kmom05</h2>
    <h3>Doctrine ORM</h3>
    <p>It went well with installing Doctrine and I could work smoothly with creating entity in database with fields. I think Doctrine is useful as it eliminate the need to write raw SQL queries. One of challenges for me was how to manage post request which was needed for adding and updating library. In the beginning, it didn’t work well as I expected when sending post request by submitting a form. I think it was due to how I write a route in controller. I tries all possibles set and found out the one which works.</p>
    <h3>User interface</h3>
    <p>For the start page of library, I made some changes with table. Firstly, I made several column for each field but it became complicated and difficult to find information for a user. So I changed to three columns with an image, info and actions. I think it became more simple and user friendly.</p>
    <h3>TIL</h3>
    <p>My TIL for  this kmom was to learn about Doctrine and ORM. I was surprised to see that  it automatically generates the necessary SQL queries and how it eases the process to integrate database in web application.</p>

    <h2 id="kmom06">Kmom06</h2>
    <h3>PHP Metrics</h3>
    <p>PHP Metrics contains lots of information and it took some time to get used to it. I think it provides valuable data about  codebase, including metrics such as cyclomatic complexity, lines of code, number of classes, methods, and namespaces, among others. Graphs and charts generated by PHP Metrics helps to understand the areas of improvement.</p>
    <h3>Scrutinizer</h3>
    <p>I found it easier to get information from Scrutinizer than PHP Metrics in the begining and I think it is still so. It provides clear improvement suggestions in text and badges and scores are simple and easy to understand. When I worked on improving my code, I mostly made my changed based on Scrutinizer and I could get better score afterward.</p>
    <h3>Code Quality</h3>
    <p>I haven't had much experience receiving feedback on my code before, and my understanding of code quality was limited. I knew that bad code tends to be long, complicated, and hard to understand, but my knowledge didn't go much further than that. Learning about the 6C principles was quite interesting, and exploring tools like PHPMetrics and Scrutinizer provided me with valuable insights. I think code quality is something we can measure mostly using tools. At the same time, those measured scores and metrics have limits and can not cover everything about code quality.</p>
    <h3>TIL</h3>
    <p>I have learned how to use PHPMetrics and Scrutinizer to assess code quality using various indices and metrics. I also understand that code quality is not something we can fully grasp solely through these tools.</p>

    <h2 id="kmom10">Kmom10</h2>
    <h3>Requirements</h3>
    <p><b>1-3:</b> I chose Cloud Solution as my theme for the project which was based on my current interest. I mainly compared three major cloud providers with data I found on internet. To design the project web pages, I applied more business like theme by changing font, background color and centered contents. The table under title Comparison is created using three tables in SQLite database. Other figures in the page are from internet and text are written by me based on articles I found on internet.</p>
    <p><b>4: API</b> I made four GET routes and one Post route. By clicking “AWS”, “Azure”, or “GCP”, a user can get corresponding table’s all data. By clicking “All”, all of aws, azure and gcp data will be displayed. One post route is to update market share value of aws. It get a user input and send a post request to update to the input data. Creating get routes went smooth while post route took some time. I checked web browser in developer’s mode and found out that it was failing to send post request. It was due to that I was writing form in from in twig file which didn’t send post request even it was method post and action to the correct path was set.</p>
    <p><b>5: ORM</b> I made one entity called Cloud by following the way I did in kmom05.  I had misconceptions about entities and tables in the begining. By examining the contents of migration files, I was able to deepen my understanding of ORM. Then made three tables using the Cloud entity. These three tables are for each cloud providers of aws, azure and gcp. There are no direct relationships in these tables and are independent of each other. By using these tables, I made a data figure in the start page of this project.</p>
    <h3>About this project</h3>
    <p>I enjoyed working on this project even though I had some challenges. I think I didn’t face a time consuming problem compared to other kmom where I struggle to fix errors with installation of new tools, so it went quite well. What was challenging for me was database and ORM. I get confused with ORM with concepts around entity and table so I took little extra time to learn it again. I think it was an appropriate project which a student could repeat all newly gained knowledge.</p>
    <h3>About mvc course</h3>
    <p>The course was well-structured, and it had all the necessary information I needed for my studies. The most challenging part for me was the tool installations, but I think this was related to my computer's settings and configurations. I gained new knowledge about ORM, PHP Metrics, and Scrutinizer, and I am satisfied with the comprehensive content of the course. Through the creation of card games in the first half of the course, I was able to learn about objects and classes.　I would highly recommend this course to anyone interested in web development with PHP.</p>


</main>

{% endblock %}
