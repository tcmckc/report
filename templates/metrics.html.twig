{% extends "base.html.twig" %}

{% block title %}Metrics{% endblock %}

{% block main %}

<h1>Metrics</h1>
<h2>Introduction</h2>
<h3>Codestyle</h3>
<p>Codestyle refers to the consistent formatting and structure of the source code. Consistent coding style across the entire codebase improves readability and maintainability. It includes aspects like indentation, naming conventions, and comments.</p>

<h3>Coverage</h3>
<p>Coverage measures the percentage of code that is executed by tests. Higher code coverage means that more parts of the codebase are tested. Adequate test coverage is essential to ensure that the software behaves as expected under various conditions.</p>

<h3>Complexity</h3>
<p>Complexity refers to how intricate the code logic is. It's often measured using metrics like cyclomatic complexity, which counts the number of different paths through the code. Lower complexity indicates easier-to-understand code.</p>

<h3>Cohesion</h3>
<p>Cohesion measures how well-related the elements within a module are. High cohesion means that elements within a module are closely related and work together to achieve a common purpose. Modules with high cohesion are typically more understandable, reusable, and maintainable.</p>

<h3>Coupling</h3>
<p>Coupling measures how much one module relies on another. Low coupling means that modules are independent and changes in one module don't affect others significantly. High coupling can lead to fragile code making the system harder to maintain and modify.</p>

<h3>CRAP</h3>
<p>CRAP is a metric used to evaluate code maintainability. It combines cyclomatic complexity and code coverage. The CRAP score identifies complex code that lacks adequate test coverage.</p>

<h2>PHP Metrics</h2>
<p>Violations: There are class and package violations in my code. After installing symfony/marker-bundle, I encountered numerous errors related to dependency conflicts. I invested time in resolving these issues, eventually opting to downgrade the maker-bundle to a lower version. While there might be further steps I can take to clean up my dependencies, the current setup is functional.</p>
<p>Maintainability/complexity: THe Game class has a red circle indicatiing a cyclomatic complexity of 15 and maintainability index 35.44, both are higher than those of other classes. To improve my code, I can reduce the number of loops and conditional branches (if statements) which will lower the cyclomatic complexity score.</p>
<p>Class: CLOC score for the Game class was 0 which means there are no comments. By adding comments, I should make the class easier to understand for other developers.</p>

<img src="img/metrics.png" width="200px" alt="PhpMetrics-img">

<h2>Scrutinizer</h2>
<a href="https://scrutinizer-ci.com/g/tcmckc/report/?branch=master" target="_blank">
    <img src="https://scrutinizer-ci.com/g/tcmckc/report/badges/quality-score.png?b=master" alt="Scrutinizer">
    <img src="https://scrutinizer-ci.com/g/tcmckc/report/badges/coverage.png?b=master" alt="coverage">
    <img src="https://scrutinizer-ci.com/g/tcmckc/report/badges/build.png?b=master" alt="build">
    <img src="https://scrutinizer-ci.com/g/tcmckc/report/badges/code-intelligence.svg?b=master" alt="code intelligence">
</a>
<p>All classes got A and almost A for all operations as well but for getScore() in the Game class and constructer in the Deck class got B for their operations. In the getScore(), there are 66 paths and I think this complexity need to be improved. In the constructer of the Deck class, there is a variable which is dead and can be removed.</p>
<p>Coverage is only 21% in the badge but this is for whole src folder and when I looked into Game folder where I wrote all the tests, the coverage is 100% and 94.5% for respective classes.</p>

<h2>Analysis</h2>
<p>I wondered why Scrutinizer gave A for the Game class even though a function in it got B. I learned that it is because scores for classes analyzes metrics such as complexity, maintainability, and various other factors related to the entire class, while operations refer to analysis of individual methods or functions separately from the overall class structure.</p>
<p>Overall, the Game class got A as a class from Scrutinizer, but PHP Metrics gave the file which contains the Game class a red big circle which means it will be probably hard to maintain.
PHP Metrics draw this result based on cyclomatic complexity and maintainability, while Scrutinizer is using metrics such as complexity, size, duplication, test coverage, changes and bugs. Due to which matrics you focus on, it seems to draw a different assesment.</p>

<h2>Improvements</h2>
<p>1. Improve the constructer method in the Deck class by removing the unneccesary assignment of "$score=0;".</p>
<p>2. Reduce paths in the getScore method in the Game class to improve its complexity.</p>
<p>3. Add comments to the Game class and improve code to be more understandable.</p>
<p>I made above three improvements to my code. Scrutinizer and PHP Metrics gave better scores as below. However, PHP Metrics's cynclomatic complexity and maintainability index didn't improve.</p>
<h3>Scrutinizer:</h3>
<table>
    <tr>
        <th></th>
        <th>Before</th>
        <th>After</th>
    </tr>
    <tr>
        <td>Overall score</td>
        <td>9.87</td>
        <td>9.94</td>
    </tr>
    <tr>
        <td>getScore() score</td>
        <td>B</td>
        <td>A</td>
    </tr>
    <tr>
        <td>getScore() complexity</td>
        <td>8</td>
        <td>3</td>
    </tr>
    <tr>
        <td>getScore() CRAP</td>
        <td>8</td>
        <td>7</td>
    </tr>
</table>

<h3>PHP Metrics</h3>
<table>
    <tr>
        <th></th>
        <th>Before</th>
        <th>After</th>
    </tr>
    <tr>
        <td>Cynclomatic complexity for Game</td>
        <td>15</td>
        <td>15</td>
    </tr>
    <tr>
        <td>Maintainability index for Game</td>
        <td>35.44</td>
        <td>35.44</td>
    </tr>
    <tr>
        <td>Avarage cyclomatic complexity by class</td>
        <td>2.94</td>
        <td>2.65</td>
    </tr>
    <tr>
        <td>ClassRank for Game</td>
        <td>74.26</td>
        <td>35.44</td>
    </tr>
    <tr>
        <td>Average weighted method count by class</td>
        <td>5.29</td>
        <td>5</td>
    </tr>
    <tr>
        <td>CLOC for Game</td>
        <td>0</td>
        <td>40</td>
    </tr>
</table>

<h2>Discussion</h2>
From PHP Metrics and Schrutinizer, I got some feedbacks which I never thougt of. So I think it is good to use these tools to improve my code and keep in mind about writing clean code which is easy to forget when I am working on developing something. I think writing clean code is also important from security perspective because it is easier to find vulnerabilities in clean code than in messy code. I also think it is good to use these tools to check my code before I submit a pull request to the main branch. At the same time, it will be good not to reply too much on these tools as it might not catch all runtime or dynamic issues.</p>

{% endblock %}
