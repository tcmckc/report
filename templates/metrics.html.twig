{% extends "base.html.twig" %}

{% block title %}Metrics{% endblock %}

{% block main %}

<h1>Introduction</h1>
<h3>Codestyle</h3>
<p>Codestyle refers to the consistent formatting and structure of the source code. Consistent coding style across the entire codebase improves readability and maintainability. It includes aspects like indentation, naming conventions, and comments.</p>

<h3>Coverage</h3>
<p>Coverage measures the percentage of code that is executed by tests. Higher code coverage means that more parts of the codebase are tested. Adequate test coverage is essential to ensure that the software behaves as expected under various conditions.</p>

<h3>Complexity</h3>
<p>Complexity refers to how intricate the code logic is. It's often measured using metrics like cyclomatic complexity, which counts the number of different paths through the code. Lower complexity indicates easier-to-understand code.</p>

<h3>Cohesion</h3>
<p>Cohesion measures how well-related the elements within a module are. High cohesion means that elements within a module are closely related and work together to achieve a common purpose. Modules with high cohesion are typically more understandable, reusable, and maintainable.</p>

<h3>Coupling</h3>
<p>Coupling measures how much one module relies on another. Low coupling means that modules are independent and changes in one module don't affect others significantly. High coupling can lead to fragile code making the system harder to maintain and modify.</p>

<h3>CRAP</h3>
<p>CRAP is a metric used to evaluate code maintainability. It combines cyclomatic complexity and code coverage. The CRAP score identifies complex code that lacks adequate test coverage.</p>

<h1>PHP metrics</h1>

<h1>Scrutinizer</h1>

<h1>Analysis</h1>

<h1>Improvements</h1>

<h1>Discussion</h1>



{% endblock %}
